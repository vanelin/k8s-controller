name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write
      attestations: write
      id-token: write
    env:
      SERVER_PORT: 8080
      METRIC_PORT: 8081
      LOGGING_LEVEL: info
      KUBECONFIG: ~/.kube/config
      NAMESPACE: default
      IN_CLUSTER: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache: true

      - name: Extract version (strip v)
        id: version
        run: |
          RAW_TAG=${GITHUB_REF#refs/tags/}
          VERSION=${RAW_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "full_tag=$RAW_TAG" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          make build-linux \
            VERSION=${{ steps.version.outputs.version }} \
            SERVER_PORT=$SERVER_PORT \
            METRIC_PORT=$METRIC_PORT \
            LOGGING_LEVEL=$LOGGING_LEVEL \
            KUBECONFIG=$KUBECONFIG
          mkdir -p release-files
          tar -czvf release-files/k8s-controller-linux-amd64.tar.gz build/k8s-controller-linux-amd64
          tar -czvf release-files/k8s-controller-linux-arm64.tar.gz build/k8s-controller-linux-arm64

      - name: Run tests
        run: make test

      - name: Update Helm chart version
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.version=strenv(VERSION)' charts/app/Chart.yaml
            yq -i '.appVersion=strenv(FULL_TAG)' charts/app/Chart.yaml
            yq -i '.image.tag=strenv(VERSION)' charts/app/values.yaml
        env:
          VERSION: ${{ steps.version.outputs.version }}
          FULL_TAG: ${{ steps.version.outputs.full_tag }}

      - name: Commit updated Helm chart version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add charts/app/Chart.yaml charts/app/values.yaml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Helm chart version to ${{ steps.version.outputs.version }}"
            git push origin HEAD:main
          fi

      - name: Package Helm chart
        run: |
          helm package charts/app --version ${{ steps.version.outputs.version }} --app-version ${{ steps.version.outputs.full_tag }}
          mv controller-${{ steps.version.outputs.version }}.tgz release-files/k8s-controller-helm-chart.tgz

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: setup-buildx
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:v0.23.1

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Go Build Cache for Docker
        uses: actions/cache@v4
        id: cache
        with:
          path: go-build-cache
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-cache-

      - name: Fix cache permissions
        if: steps.cache.outputs.cache-hit != 'false'
        run: |
          echo "::group::Fixing go-build-cache permissions"
          sudo chown -R $(id -u):$(id -g) go-build-cache
          sudo chmod -R u+rwX,go+rX go-build-cache
          echo "::endgroup::"

      - name: Inject go-build-cache
        uses: reproducible-containers/buildkit-cache-dance@v3.3.0
        with:
          builder: ${{ steps.setup-buildx.outputs.name }}
          cache-map: |
            {
              "go-build-cache": "/root/.cache/go-build"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max,ignore-error=true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          provenance: false
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            SERVER_PORT=${{ env.SERVER_PORT }}
            METRIC_PORT=${{ env.METRIC_PORT }}
            LOGGING_LEVEL=${{ env.LOGGING_LEVEL }}
            KUBECONFIG=${{ env.KUBECONFIG }}
            NAMESPACE=${{ env.NAMESPACE }}
            IN_CLUSTER=${{ env.IN_CLUSTER }}

      - name: Extract changelog for this version
        id: changelog
        run: |
          RAW_TAG=${GITHUB_REF#refs/tags/}
          PREV_TAG=$(git tag --sort=-creatordate | grep -B1 "^$RAW_TAG$" | head -n1)
          if [ -z "$PREV_TAG" ]; then PREV_TAG=$(git tag --sort=creatordate | head -n1); fi
          echo 'changelog<<EOF' >> $GITHUB_OUTPUT
          git log --pretty=format:'* %s (%h)' $PREV_TAG..$RAW_TAG >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            ## Changes in this release
            
            - Built from commit: ${{ github.sha }}
            - Version: ${{ steps.version.outputs.version }}
            - Docker images available for linux/amd64 and linux/arm64

            ## ðŸ“¦ Downloads

            **Docker Image:**
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ```

            **Binary Archives:**
            - **Linux (amd64)**: k8s-controller-linux-amd64.tar.gz
            - **Linux (arm64)**: k8s-controller-linux-arm64.tar.gz

            **Helm Chart:**
            - k8s-controller-helm-chart.tgz
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            release-files/*
          generate_release_notes: true 