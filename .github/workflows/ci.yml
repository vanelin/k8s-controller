name: CI

on:
  push:
    branches: [ "main", "feature/**" ]
    paths:
      - '**.go'
      - '**.mod'
      - '**.sum'
      - 'charts/**'
      - 'cmd/**'
      - 'pkg/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ "main", "feature/**" ]
    paths:
      - '**.go'
      - '**.mod'
      - '**.sum'
      - 'charts/**'
      - 'cmd/**'
      - 'pkg/**'
      - '.github/workflows/ci.yml'

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository_owner }}
  APP: k8s-controller

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            platform: linux/amd64
          - os: linux
            arch: arm64
            platform: linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Set version
        id: vars
        run: |
          # Get the latest tag or use 0.1.0 as default
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # If this is a tag push, use the tag as version
            VERSION=${GITHUB_REF#refs/tags/}
            APP_VERSION=${VERSION}
            DOCKER_TAG=${VERSION}
          else
            # For commits, use latest tag + short SHA
            VERSION="${LATEST_TAG}-${SHORT_SHA}"
            APP_VERSION=${SHORT_SHA}
            DOCKER_TAG="${LATEST_TAG}-${SHORT_SHA}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Run tests
        run: make test

      - name: Build binary
        run: |
          mkdir -p build
          make build TARGETOS=${{ matrix.os }} TARGETOSARCH=${{ matrix.arch }} VERSION=${{ steps.vars.outputs.version }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: k8s-controller-${{ matrix.os }}-${{ matrix.arch }}
          path: k8s-controller

  docker-build:
    name: Build and Push Multi-Arch Docker Image
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: vars
        run: |
          # Get the latest tag or use 0.1.0 as default
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # If this is a tag push, use the tag as version
            VERSION=${GITHUB_REF#refs/tags/}
            APP_VERSION=${VERSION}
            DOCKER_TAG=${VERSION}
          else
            # For commits, use latest tag + short SHA
            VERSION="${LATEST_TAG}-${SHORT_SHA}"
            APP_VERSION=${SHORT_SHA}
            DOCKER_TAG="${LATEST_TAG}-${SHORT_SHA}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch Docker image
        run: |
          make docker-build-multi VERSION=${{ steps.vars.outputs.version }} REPOSITORY=${{ env.REPOSITORY }}

      - name: Trivy Scan Docker Image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.APP }}:${{ steps.vars.outputs.docker_tag }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'

  helm-package:
    name: Package Helm Chart
    runs-on: ubuntu-latest
    needs: docker-build
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: vars
        run: |
          # Get the latest tag or use 0.1.0 as default
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # If this is a tag push, use the tag as version
            VERSION=${GITHUB_REF#refs/tags/}
            APP_VERSION=${VERSION}
            DOCKER_TAG=${VERSION}
          else
            # For commits, use latest tag + short SHA
            VERSION="${LATEST_TAG}-${SHORT_SHA}"
            APP_VERSION=${LATEST_TAG}-${SHORT_SHA}
            DOCKER_TAG="${LATEST_TAG}-${SHORT_SHA}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Update values.yaml
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.image.tag=strenv(DOCKER_TAG)' charts/app/values.yaml
        env:
          DOCKER_TAG: ${{ steps.vars.outputs.docker_tag }}

      - name: Package Helm chart
        run: |
          helm package charts/app --version ${{ steps.vars.outputs.version }} --app-version ${{ steps.vars.outputs.app_version }}
          mkdir -p chart-artifacts
          mv controller-${{ steps.vars.outputs.version }}.tgz chart-artifacts/

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: k8s-controller-helm-chart
          path: chart-artifacts/