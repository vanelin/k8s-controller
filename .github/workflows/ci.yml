name: CI

on:
  push:
    branches: [ "main", "feature/**" ]
    paths:
      - '**.go'
      - '**.mod'
      - '**.sum'
      - 'charts/**'
      - 'cmd/**'
      - 'pkg/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ "main", "feature/**" ]
    paths:
      - '**.go'
      - '**.mod'
      - '**.sum'
      - 'charts/**'
      - 'cmd/**'
      - 'pkg/**'
      - '.github/workflows/ci.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository_owner }}
  APP: k8s-controller

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      app_version: ${{ steps.vars.outputs.app_version }}
      docker_tag: ${{ steps.vars.outputs.docker_tag }}
      latest_tag: ${{ steps.vars.outputs.latest_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: vars
        run: |
          # Get the latest tag or use 0.1.0 as default
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # If this is a tag push, use the tag as version (remove "v" prefix)
            RAW_TAG=${GITHUB_REF#refs/tags/}
            VERSION=${RAW_TAG#v}
            APP_VERSION=${RAW_TAG}
            DOCKER_TAG=${VERSION}
          else
            # For commits, use latest tag + short SHA (remove "v" prefix from tag)
            LATEST_TAG_CLEAN=${LATEST_TAG#v}
            VERSION="${LATEST_TAG_CLEAN}-${SHORT_SHA}"
            APP_VERSION="${LATEST_TAG}-${SHORT_SHA}"
            DOCKER_TAG="${VERSION}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

  build-and-docker:
    name: Build Binaries and Docker Images
    runs-on: ${{ matrix.runner }}
    needs: calculate-version
    permissions:
      contents: read
      packages: write
      security-events: write
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            platform: linux/arm64
            runner: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: make test

      - name: Get dependencies and format code
        run: |
          make get
          make format

      - name: Build binary
        run: |
          mkdir -p build
          make build TARGETOS=${{ matrix.os }} TARGETOSARCH=${{ matrix.arch }} VERSION=${{ needs.calculate-version.outputs.version }}

      - name: Create compressed artifact
        run: |
          mkdir -p artifacts
          tar -czvf artifacts/k8s-controller-${{ matrix.os }}-${{ matrix.arch }}.tar.gz k8s-controller

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: k8s-controller-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          path: artifacts/k8s-controller-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          retention-days: 14

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: |
            /tmp/.buildx-cache
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-buildx-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.platform }}-
            ${{ runner.os }}-buildx-

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.APP }}:${{ needs.calculate-version.outputs.docker_tag }}-${{ env.PLATFORM_PAIR }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=local,src=~/.cache/go-build
            type=local,src=~/go/pkg/mod
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=local,dest=~/.cache/go-build,mode=max
            type=local,dest=~/go/pkg/mod,mode=max
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          build-args: |
            VERSION=${{ needs.calculate-version.outputs.version }}
            SERVER_PORT=8080
            LOGGING_LEVEL=debug

      - name: Export image info
        run: |
          mkdir -p ${{ runner.temp }}/images
          echo "${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.APP }}:${{ needs.calculate-version.outputs.docker_tag }}-${{ env.PLATFORM_PAIR }}" > ${{ runner.temp }}/images/${{ env.PLATFORM_PAIR }}

      - name: Upload image info
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/images/${{ env.PLATFORM_PAIR }}
          if-no-files-found: error
          retention-days: 1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          # Keep Go cache in place as it's already in the right location

      - name: Trivy Scan Docker Image
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: ${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Show Trivy scan summary
        run: |
          COUNT=$(cat trivy-image-results.sarif | jq '.runs[0].results | length')
          echo "Trivy found $COUNT vulnerabilities/issues"

      - name: Upload Trivy Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-docker:
    name: Merge Docker Images
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-docker]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Download image info
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/images
          pattern: image-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/images
        run: |
          # Read image tags from files
          AMD64_IMAGE=$(cat linux-amd64)
          ARM64_IMAGE=$(cat linux-arm64)
          
          # Create manifest list
          docker buildx imagetools create \
            -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.APP }}:${{ needs.calculate-version.outputs.docker_tag }} \
            $AMD64_IMAGE $ARM64_IMAGE

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.REPOSITORY }}/${{ env.APP }}:${{ needs.calculate-version.outputs.docker_tag }}

  helm-package:
    name: Package Helm Chart
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-docker, merge-docker]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update values.yaml
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '.image.tag=strenv(DOCKER_TAG)' charts/app/values.yaml
        env:
          DOCKER_TAG: ${{ needs.calculate-version.outputs.docker_tag }}

      - name: Package Helm chart
        run: |
          helm package charts/app --version ${{ needs.calculate-version.outputs.version }} --app-version ${{ needs.calculate-version.outputs.app_version }}
          mkdir -p chart-artifacts
          mv controller-${{ needs.calculate-version.outputs.version }}.tgz chart-artifacts/k8s-controller-helm-chart.tgz

      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: k8s-controller-helm-chart
          path: chart-artifacts/
          retention-days: 14